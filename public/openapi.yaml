openapi: 3.1.0
info:
  title: API Caisse de Dépots et de Consignations 
  version: 1.0.0
  description: |
    Documentation OpenAPI décrivant l’API d’authentification, de gestion des demandes et du backoffice.

    Points d’attention :
      - Les rôles attribués aux agents doivent exister avec le guard `sanctum`.
      - Les e-mails (création d’agent, mises à jour de demande) sont envoyés via la file de jobs `database`; assurez-vous qu’un worker tourne (`php artisan queue:work`).
servers:
  - url: http://127.0.0.1:8000/api
    # variables:
    #   host:
    #     default: localhost
components:
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: Les données fournies sont invalides.
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: verificateur
        guard_name:
          type: string
          example: sanctum
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    ParticulierProfile:
      type: object
      description: Profil pour un utilisateur particulier. Aucun champ supplémentaire n’est requis pour le moment.
      additionalProperties: false
    EntrepriseProfile:
      type: object
      properties:
        nom_entreprise:
          type: string
          example: CDC Services
        type_entreprise:
          type: string
          example: PME
    InstitutionProfile:
      type: object
      properties:
        nom_institution:
          type: string
          example: Ministère de l’Industrie
        type_institution:
          type: string
          example: Public
    UserProfile:
      oneOf:
        - $ref: '#/components/schemas/ParticulierProfile'
        - $ref: '#/components/schemas/EntrepriseProfile'
        - $ref: '#/components/schemas/InstitutionProfile'
      nullable: true
    Permission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12
        name:
          type: string
          example: demandes.manage
        guard_name:
          type: string
          example: sanctum
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        nom:
          type: string
          example: Ndiaye
        prenom:
          type: string
          example: Aminata
        email:
          type: string
          format: email
          example: aminata.ndiaye@cdc.local
        telephone:
          type: string
          example: "+221780000000"
        type:
          type: string
          nullable: true
          description: Type de profil associé à l’utilisateur.
          enum: [particulier, entreprise, institution]
        profile:
          $ref: '#/components/schemas/UserProfile'
        roles:
          type: array
          description: Liste des rôles Spatie attachés à l’utilisateur (surtout pour les agents backoffice).
          items:
            $ref: '#/components/schemas/Role'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Agent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        division:
          type: string
          example: Traitement des demandes
        matricule:
          type: string
          example: AG-2025-016
        poste:
          type: string
          example: Analyste backoffice
        user_id:
          type: integer
          format: int64
          example: 42
        user:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        nom:
          type: string
          example: Aide à domicile
        description:
          type: string
          example: Service d’accompagnement personnalisé.
        avantage:
          type: array
          items:
            type: string
          example:
            - Rapide
            - Fiable
        delai:
          type: string
          example: 5 jours
        montant_min:
          type: number
          format: float
          example: 150.5
        document_requis:
          type: array
          items:
            type: string
          example:
            - Pièce d’identité
        user_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Document:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 17
        titre:
          type: string
          example: Pièce d’identité
        path:
          type: string
          example: documents/identite.pdf
        demande_id:
          type: integer
          format: int64
          example: 3
        user_id:
          type: integer
          format: int64
          example: 42
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    Demande:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12
        type_demande:
          type: string
          example: Particulier
        status:
          type: string
          example: verification document
        description:
          type: string
          example: Besoin de vérification rapide.
        urgent:
          type: boolean
          example: true
        user_id:
          type: integer
          format: int64
          example: 42
        service_id:
          type: integer
          format: int64
          example: 2
        user:
          $ref: '#/components/schemas/User'
        service:
          $ref: '#/components/schemas/Service'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          format: uri
          nullable: true
        last:
          type: string
          format: uri
          nullable: true
        prev:
          type: string
          format: uri
          nullable: true
        next:
          type: string
          format: uri
          nullable: true
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        from:
          type: integer
          nullable: true
        last_page:
          type: integer
          example: 10
        path:
          type: string
          example: http://localhost/api/demandes
        per_page:
          type: integer
          example: 15
        to:
          type: integer
          nullable: true
        total:
          type: integer
          example: 150
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                nullable: true
              label:
                type: string
              active:
                type: boolean
    AgentPagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    DemandePagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Demande'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    ServicePagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    DocumentPagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    RolePagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
    PermissionPagination:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        links:
          $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
security:
  - BearerToken: []
paths:
  /auth/register:
    post:
      summary: Inscription utilisateur
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nom, prenom, email, telephone, password, password_confirmation, type_utilisateur]
              properties:
                nom: { type: string }
                prenom: { type: string }
                email: { type: string, format: email }
                telephone: { type: string }
                password: { type: string, format: password }
                password_confirmation: { type: string, format: password }
                type_utilisateur: { type: string, enum: [particulier, entreprise, institution] }
                nom_entreprise: { type: string, nullable: true }
                type_entreprise: { type: string, nullable: true }
                nom_institution: { type: string, nullable: true }
                type_institution: { type: string, nullable: true }
      responses:
        '201': { description: Utilisateur créé }
        '422':
          description: Erreurs de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /auth/login:
    post:
      summary: Connexion (email ou téléphone)
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                email: { type: string, format: email, nullable: true }
                telephone: { type: string, nullable: true }
                password: { type: string, format: password }
                device_name: { type: string, nullable: true }
      responses:
        '200': { description: Token délivré }
        '202': { description: OTP requis }
        '403': { description: Email non vérifié }
        '422':
          description: Identifiants invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /demandes:
    get:
      summary: Liste des demandes de l’utilisateur
      tags: [Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: query
          name: type
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: urgent
          schema: { type: boolean }
        - in: query
          name: service_id
          schema: { type: integer }
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandePagination'
    post:
      summary: Créer une demande
      tags: [Demandes]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [type_demande, description, service_id]
              properties:
                type_demande: { type: string }
                description: { type: string }
                urgent: { type: boolean }
                service_id: { type: integer }
                documents:
                  type: array
                  items: { type: string, format: binary }
      responses:
        '201':
          description: Demande créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
  /demandes/{demande}:
    get:
      summary: Détail d’une demande
      tags: [Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Demande
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
    patch:
      summary: Mettre à jour une demande
      tags: [Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                description: { type: string }
                status: { type: string }
                urgent: { type: boolean }
                documents:
                  type: array
                  items: { type: string, format: binary }
                documents_to_remove:
                  type: array
                  items: { type: integer }
      responses:
        '200':
          description: Demande mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
    delete:
      summary: Supprimer une demande
      tags: [Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Supprimée }
  /services:
    get:
      summary: Liste des services
      tags: [Services]
      security: [{ BearerToken: [] }]
      parameters:
        - in: query
          name: per_page
          schema: { type: integer }
          description: Nombre de services par page (15 par défaut).
      responses:
        '200':
          description: Liste paginée des services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePagination'
  /services/{service}:
    get:
      summary: Détail d’un service
      tags: [Services]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /demandes/{demande}/documents:
    get:
      summary: Liste des documents d’une demande
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Documents de la demande
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      summary: Ajouter un document à une demande
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [fichier]
              properties:
                titre: { type: string }
                fichier: { type: string, format: binary }
      responses:
        '201':
          description: Document créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
  /documents/{document}:
    get:
      summary: Détail d’un document
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    put:
      summary: Mettre à jour un document
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [titre]
              properties:
                titre: { type: string }
      responses:
        '200':
          description: Document mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    patch:
      summary: Mise à jour partielle d’un document
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [titre]
              properties:
                titre: { type: string }
      responses:
        '200':
          description: Document mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      summary: Supprimer un document
      tags: [Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Document supprimé }
  /backoffice/services:
    post:
      summary: Créer un service
      tags: [Backoffice Services]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nom, description, avantage, delai, montant_min, document_requis]
              properties:
                nom: { type: string }
                description: { type: string }
                avantage:
                  type: array
                  items: { type: string }
                delai: { type: string }
                montant_min: { type: number, format: float }
                document_requis:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Service créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
  /backoffice/services/{service}:
    put:
      summary: Mettre à jour un service
      tags: [Backoffice Services]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom: { type: string }
                description: { type: string }
                avantage:
                  type: array
                  items: { type: string }
                delai: { type: string }
                montant_min: { type: number, format: float }
                document_requis:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Service mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    patch:
      summary: Mise à jour partielle d’un service
      tags: [Backoffice Services]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom: { type: string }
                description: { type: string }
                avantage:
                  type: array
                  items: { type: string }
                delai: { type: string }
                montant_min: { type: number, format: float }
                document_requis:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Service mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      summary: Supprimer un service
      tags: [Backoffice Services]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: service
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Service supprimé }
  /backoffice/demandes:
    get:
      summary: Liste des demandes (backoffice)
      tags: [Backoffice Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: query
          name: status
          schema: { type: string }
        - in: query
          name: type
          schema: { type: string }
        - in: query
          name: urgent
          schema: { type: boolean }
        - in: query
          name: service_id
          schema: { type: integer }
        - in: query
          name: user_id
          schema: { type: integer }
        - in: query
          name: created_from
          schema: { type: string, format: date }
        - in: query
          name: created_to
          schema: { type: string, format: date }
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemandePagination'
  /backoffice/demandes/{demande}:
    get:
      summary: Détail complet d’une demande (backoffice)
      tags: [Backoffice Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Demande
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
    patch:
      summary: Mise à jour d’une demande (backoffice)
      tags: [Backoffice Demandes]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: demande
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                status: { type: string }
                urgent: { type: boolean }
                description: { type: string }
                documents:
                  type: array
                  items: { type: string, format: binary }
                documents_to_remove:
                  type: array
                  items: { type: integer }
      responses:
        '200':
          description: Demande mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
  /backoffice/demandes/{demande}/documents:
    post:
      summary: Ajouter des documents (backoffice)
      tags: [Backoffice Documents]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [documents]
              properties:
                documents:
                  type: array
                  items: { type: string, format: binary }
                documents_meta:
                  type: array
                  items:
                    type: object
                    properties:
                      titre: { type: string }
      responses:
        '201':
          description: Documents ajoutés
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Demande'
  /backoffice/documents/{document}:
    patch:
      summary: Mettre à jour un document (backoffice)
      tags: [Backoffice Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [titre]
              properties:
                titre: { type: string }
      responses:
        '200':
          description: Document mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      summary: Supprimer un document
      tags: [Backoffice Documents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: document
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Document supprimé }
  /backoffice/agents:
    get:
      summary: Liste des agents
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentPagination'
    post:
      summary: Créer un agent
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nom, prenom, email, telephone, division, matricule, poste, roles]
              properties:
                nom: { type: string }
                prenom: { type: string }
                email: { type: string, format: email }
                telephone: { type: string }
                division: { type: string }
                matricule: { type: string }
                poste: { type: string }
                roles:
                  type: array
                  description: >-
                    Liste des noms de rôles (guard `sanctum`). Une chaîne séparée par des virgules/points-virgules est acceptée.
                  items:
                    type: string
                  example: [verificateur, agence]
      responses:
        '201':
          description: Agent créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '422':
          description: Erreur de validation (rôle inexistant, doublon…)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /backoffice/agents/{agent}:
    get:
      summary: Détail d’un agent
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: agent
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Agent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
    put:
      summary: Mise à jour complète d’un agent
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: agent
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom: { type: string }
                prenom: { type: string }
                email: { type: string }
                telephone: { type: string }
                division: { type: string }
                matricule: { type: string }
                poste: { type: string }
                roles:
                  type: array
                  description: >-
                    Liste des rôles (guard `sanctum`). Peut aussi être transmise sous forme de chaîne séparée.
                  items:
                    type: string
      responses:
        '200':
          description: Agent mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '422':
          description: Erreur de validation (champ unique ou rôle invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    patch:
      summary: Mise à jour partielle d’un agent
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: agent
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Agent modifié
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '422':
          description: Erreur de validation (champ unique ou rôle invalide)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Supprimer un agent
      tags: [Backoffice Agents]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: agent
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Agent supprimé }
  /backoffice/roles:
    get:
      summary: Liste des rôles
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolePagination'
    post:
      summary: Créer un rôle
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                guard_name: { type: string }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Rôle créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /backoffice/roles/{role}:
    get:
      summary: Détail d’un rôle
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: role
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Rôle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      summary: Mise à jour complète d’un rôle
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: role
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                guard_name: { type: string }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Rôle mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    patch:
      summary: Mise à jour partielle d’un rôle
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: role
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Rôle mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      summary: Supprimer un rôle
      tags: [Backoffice Rôles]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: role
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Supprimé }
  /backoffice/permissions:
    get:
      summary: Liste des permissions
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      responses:
        '200':
          description: Liste paginée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionPagination'
    post:
      summary: Créer une permission
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                guard_name: { type: string }
      responses:
        '201':
          description: Permission créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
  /backoffice/permissions/{permission}:
    get:
      summary: Détail d’une permission
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: permission
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    put:
      summary: Mise à jour d’une permission
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: permission
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                guard_name: { type: string }
      responses:
        '200':
          description: Permission mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    patch:
      summary: Mise à jour partielle d’une permission
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: permission
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Permission mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    delete:
      summary: Supprimer une permission
      tags: [Backoffice Permissions]
      security: [{ BearerToken: [] }]
      parameters:
        - in: path
          name: permission
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Supprimée }
